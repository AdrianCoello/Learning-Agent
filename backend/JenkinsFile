pipeline {
    agent any

    environment {
        CI = 'true'
        NODE_ENV = 'production'
        DOCKER_IMAGE = "adriancoello/learning-agent-backend"
        DOCKER_TAG = "build-${env.BUILD_NUMBER}"
        DROPLET_IP = '104.248.216.179' 
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('backend') {
                        sh 'echo "Building Docker image..."'
                        sh "docker build -t ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh 'echo "Running tests inside Docker..."'
                    sh "docker run --rm ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} npm test || echo 'No tests found'"
                }
            }
        }

        stage('Deploy to Droplet') {
            steps {
                script {
                    sshagent(['droplet-ssh-key']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no root@${env.DROPLET_IP} '
                                echo "Stopping existing container..."
                                docker stop learning-agent-backend || true
                                docker rm learning-agent-backend || true
                                
                                echo "Pulling Docker image..." 
                                docker pull ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}

                                echo "Running new container..."
                                docker run -d \\
                                    --name learning-agent-backend \\
                                    -p 3000:3000 \\
                                    --restart unless-stopped \\
                                    ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}
                                
                                echo "Deployment completed!"
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
